/*
The array is actually sorted, but after squaring, negative numbers may become the maximum values.

Therefore, the maximum value after squaring the array lies at either end of the array, 
either at the far left or the far right, but not in the middle.

In this case, we can consider using the two-pointer approach，with one pointer (i) pointing to the start position 
and the other pointer (j) pointing to the end position.

Define a new array called "result" with the same size as array A, 
and let another pointer (k) point to the end position of the result array.

if A[i] * A[i] < A[j] * A[j] ，result[k--] = A[j] * A[j]; i++

if A[i] * A[i] >= A[j] * A[j] ，result[k--] = A[i] * A[i]; j--
*/

python：

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        l, r, i = 0, len(nums)-1, len(nums)-1
        res = [float('inf')] * len(nums) # It is necessary to define the list in advance to store the results
        while l <= r:
            if nums[l] ** 2 < nums[r] ** 2: # Compare the boundaries on the left and right to find the maximum value
                res[i] = nums[r] ** 2
                r -= 1 # Move the right pointer to the left
            else:
                res[i] = nums[l] ** 2
                l += 1 # Move the left pointer to the right
            i -= 1 # The pointer storing the result needs to move forward one position
        return res




java：

class Solution {
    public int[] sortedSquares(int[] nums) {
        int right = nums.length - 1;
        int left = 0;
        int[] result = new int[nums.length];
        int index = result.length - 1;
        while (left <= right) {
            if (nums[left] * nums[left] > nums[right] * nums[right]) {
                // The relative position of positive numbers remains unchanged,
                // but we need to adjust the relative position of negative numbers after squaring.
                result[index--] = nums[left] * nums[left];
                ++left;
            } else {
                result[index--] = nums[right] * nums[right];
                --right;
            }
        }
        return result;
    }
}

class Solution {
    public int[] sortedSquares(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        int[] res = new int[nums.length];
        int j = nums.length - 1;
        while(l <= r){
            if(nums[l] * nums[l] > nums[r] * nums[r]){
                res[j--] = nums[l] * nums[l++];
            }else{
                res[j--] = nums[r] * nums[r--];
            }
        }
        return res;
    }
}


c：

int* sortedSquares(int* nums, int numsSize, int* returnSize){
    // The size of the returned array is the same as the original array size
    *returnSize = numsSize;
    // Create two pointers, right points to the last element of the array, left points to the first element of the array
    int right = numsSize - 1;
    int left = 0;

    // The result array to be returned
    int* ans = (int*)malloc(sizeof(int) * numsSize);
    int index;
    for(index = numsSize - 1; index >= 0; index--) {
        // Left pointer points to the square of the element
        int lSquare = nums[left] * nums[left];
        // Right pointer points to the square of the element
        int rSquare = nums[right] * nums[right];
        // If the square of the element pointed to by the left pointer is greater than the square of the element pointed to by the right pointer,
        // put the square of the element pointed to by the left pointer into the result array. Move the left pointer to the right by one position
        if(lSquare > rSquare) {
            ans[index] = lSquare;
            left++;
        } 
        // If the square of the element pointed to by the right pointer is greater than the square of the element pointed to by the left pointer,
        // put the square of the element pointed to by the right pointer into the result array. Move the right pointer to the left by one position
        else {
            ans[index] = rSquare;
            right--;
        }
    }
    // Return the result array
    return ans;
}
